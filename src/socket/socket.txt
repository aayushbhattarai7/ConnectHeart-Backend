import { Server } from "socket.io";
import HttpException from "../utils/HttpException.utils";
import webTokenService from "../utils/webToken.service";
import { DotenvConfig } from "../config/env.config";

export class Socket {
    async ChatSocket(server: any) {
        const io = new Server(server, {
            cors: {
                origin: '*'
            }
        });

        io.use((socket, next) => {
            const token = socket.handshake.auth.token;
            if (!token) return next(new Error('You are not authorized'));
        
            try {
                const user = webTokenService.verify(token, DotenvConfig.ACCESS_TOKEN_SECRET);
                if (user) {
                    socket.data.user = user;
                    next();
                } else {
                    next(new Error('You are not authorized'));
                }
            } catch (error) {
                console.log("ðŸš€ ~ Socket ~ io.use ~ error:", error);
                next(new Error('Invalid token'));
            }
        });

        io.on("connection", (socket) => {
            console.log("User Connected", socket.id);
        
            socket.on("message", ({ message, receiverId }) => {
                try {
                    if (!socket.data.user) {
                        throw new Error('User is not authenticated');
                    }
        
                    const messagePayload = {
                        id: socket.id, 
                        message,
                        sender: {
                            id: socket.data.user.id,
                            details: {
                                first_name: socket.data.user.first_name,
                                last_name: socket.data.user.last_name,
                            }
                        },
                        receiver: {
                            id: receiverId,
                        }
                    };
        
                    const receiverSocket = [...io.sockets.sockets.values()].find(
                        s => s.data.user.id === receiverId
                    );
        
                    if (receiverSocket) {
                        receiverSocket.emit('message', messagePayload);
                    }
        
                    // Emit the message to the sender
                    socket.emit('message', messagePayload);
        
                    console.log('Emitted message:', messagePayload);
                } catch (error) {
                    console.error("Error sending message:", error);
                }
            });
        
            socket.on("disconnect", () => {
                console.log("User Disconnected", socket.id);
            });
        });
        
        
    }
}
